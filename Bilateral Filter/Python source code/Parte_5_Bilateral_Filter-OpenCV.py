# -*- coding: utf-8 -*-
"""Parte_5-Bilateral_FilterOpenCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OMH0LxchdKZN9fHnPnZYv3FWQ7v5Q_Dh
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

noisy_imgs = {
    'fairy-meadows': cv2.imread('fairy-meadows-noisy.png'), 
    'noir': cv2.imread('noir-noisy.png'),
    'rosso': cv2.imread('rosso-noisy'),
    'sky': cv2.imread('sky-noisy.png')
}

def apply_bilateral_filter (img_name, neigh_size = 15, intensity_rate = 1, distance_rate = 1):
  bilateral = cv2.bilateralFilter(noisy_imgs[img_name], neigh_size, intensity_rate, distance_rate)
  images_stack = np.hstack((noisy_imgs[img_name], bilateral))
  cv2_imshow(images_stack)
  return bilateral

"""# Parte 5 - Alguns parâmetros que otimizam a qualidade das imagens - diminuindo o ruído e preservando as bordas"""

apply_bilateral_filter('fairy-meadows', neigh_size = 50, intensity_rate = 50, distance_rate = 80);

apply_bilateral_filter('noir', neigh_size = 15, intensity_rate = 50, distance_rate = 80);

apply_bilateral_filter('rosso', neigh_size = 50, intensity_rate = 50, distance_rate = 80);

apply_bilateral_filter('sky', neigh_size = 50, intensity_rate = 50, distance_rate = 80);